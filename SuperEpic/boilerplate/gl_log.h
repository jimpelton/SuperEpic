#ifndef gl_log_h__
#define gl_log_h__


#ifdef _WIN32
#define __func__ __FUNCTION__
#endif

#define gl_log(fmt_, ...) hci::gl_log_fcn("%s[%d]:%s()::\n\t"  fmt_, __FILE__, __LINE__, __func__, ##__VA_ARGS__)

#define gl_log_err(fmt_, ...) hci::gl_log_err_fcn(nullptr, "%s[%d]:%s()::\n\t" fmt_, __FILE__, __LINE__, __func__, ##__VA_ARGS__)

#ifdef HCI_DEBUG
#define gl_check(fn) (fn); hci::checkForAndLogGlError(__FILE__, __func__, __LINE__);
#else
#define gl_check(fn) (fn);
#endif


namespace hci {

void subscribe_debug_callbacks();

///////////////////////////////////////////////////////////////////////////////
// \brief Check for any and all opengl errors at any given time.
// Dumps errors into gl log file and stderr.
///////////////////////////////////////////////////////////////////////////////
void checkForAndLogGlError(const char *file, const char *func, int line);


///////////////////////////////////////////////////////////////////////////////
// \brief Open the log file for writing.
//  The regular log file is written to when gl_log and gl_log_err are used.
///////////////////////////////////////////////////////////////////////////////
bool gl_log_restart();


///////////////////////////////////////////////////////////////////////////////
// \brief Open the debug log file for writing.
//  The debug log file is written to by Open GL's debug message callback thingy.
///////////////////////////////////////////////////////////////////////////////
bool gl_debug_log_restart();


///////////////////////////////////////////////////////////////////////////////
// \brief Close and flush both log and debug log.
///////////////////////////////////////////////////////////////////////////////
bool gl_log_close();


///////////////////////////////////////////////////////////////////////////////
// \brief Print an info message to the log file
///////////////////////////////////////////////////////////////////////////////
bool gl_log_fcn(const char *message, ...);


///////////////////////////////////////////////////////////////////////////////
// \brief The callback used for opengl's debug messages.
///////////////////////////////////////////////////////////////////////////////
//void gl_debug_message_callback(GLenum source,
//                               GLenum type, GLuint id, GLenum severity,
//                               GLsizei length, const GLchar *message, void *userParam);


///////////////////////////////////////////////////////////////////////////////
// \brief Dumps an error message to both stderr and the log file.
///////////////////////////////////////////////////////////////////////////////
bool gl_log_err_fcn(const char *prefix, const char *message, ...);


///////////////////////////////////////////////////////////////////////////////
// \brief Dumps gl parameter infomation to stdout and log file.
///////////////////////////////////////////////////////////////////////////////
void log_gl_params();

} /* namespace bd */

#endif // gl_log_h__

